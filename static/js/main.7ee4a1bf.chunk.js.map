{"version":3,"sources":["module/Header.js","actions/index.js","module/Create.js","module/List.js","module/Main.js","reducers/index.js","store/index.js","js/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","addNote","payload","type","Create","changeHandler","event","name","target","value","setState","state","localStorage","setItem","submitForm","preventDefault","props","dispatch","title","note","className","onSubmit","this","id","aria-describedby","placeholder","onChange","rows","Component","connect","List","scope","notes","map","Main","exact","path","component","initialState","rootReducer","action","Object","assign","concat","store","createStore","window","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAYeA,EATA,kBACX,6BACI,6BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,c,+DCPT,SAASC,EAAQC,GACpB,MAAO,CAAEC,KAAM,WAAYD,W,wOCIzBE,E,YACF,aAAe,IAAD,8BACV,+CAOJC,cAAgB,SAAAC,GACZ,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAE3B,EAAKC,S,yVAAL,IACO,EAAKC,MADZ,eAEKJ,EAAOE,KAEZG,aAAaC,QAAQN,EAAK,EAAKI,MAAMJ,KAhB3B,EAmBdO,WAAa,SAAAR,GACTA,EAAMS,iBACN,EAAKC,MAAMC,SAAShB,EAAQ,EAAKU,QACjC,EAAKD,SAAS,CACVQ,MAAO,GACPC,KAAM,MAtBV,EAAKR,MAAO,CACRO,MAAO,GACPC,KAAM,IAJA,E,sEAmCd,OACQ,yBAAKC,UAAU,MACX,yBAAKA,UAAU,aACX,0BAAMC,SAAYC,KAAKR,YACnB,yBAAKM,UAAU,kBACX,2BAAOA,UAAU,iCAAjB,SACA,yBAAKA,UAAU,aACX,2BAAOjB,KAAK,OAAOiB,UAAU,eAAeG,GAAG,qBAAqBC,mBAAiB,YAAYC,YAAY,cACrGlB,KAAK,QACLE,MAASa,KAAKX,MAAMO,MACpBQ,SAAYJ,KAAKjB,kBAGjC,yBAAKe,UAAU,mBACX,2BAAOA,UAAU,iCAAjB,QACA,yBAAKA,UAAU,aACX,8BAAUA,UAAU,eAAeG,GAAG,8BAC9BI,KAAK,KACLpB,KAAK,OACLE,MAAOa,KAAKX,MAAMQ,KAClBO,SAAWJ,KAAKjB,kBAGhC,yBAAKe,UAAU,mBACX,yBAAKA,UAAU,aACX,4BAAQjB,KAAK,SAASiB,UAAU,mBAAhC,mB,GA7DXQ,aAuENC,gBAAUzB,GCzEnB0B,E,iLAEE,OACI,6BACI,2BAAOV,UAAU,oBACb,+BACI,4BACA,wBAAIW,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,kBAGJ,+BAECT,KAAKN,MAAMgB,MAAMC,KAAI,SAAAd,GAAI,OACtB,4BACA,wBAAIY,MAAM,OAAV,KACA,4BAAKZ,EAAKD,OACV,4BAAKC,EAAKA,iB,GAlBfS,aAgCJC,mBALf,SAAyBlB,GACrB,MAAO,CACHqB,MAAOrB,EAAMqB,SAGNH,CAAyBC,GCrBzBI,EATF,kBACT,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAWP,IACnC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAO,UAAUC,UAAWjC,O,QCT/CkC,EAAe,CACjBN,MAAO,IAYIO,MATf,WAAmD,IAA9B5B,EAA6B,uDAArB2B,EAAcE,EAAO,uCAC9C,MAAmB,aAAhBA,EAAOrC,KACCsC,OAAOC,OAAO,GAAI/B,EAAO,CAC5BqB,MAAOrB,EAAMqB,MAAMW,OAAOH,EAAOtC,WAGlCS,GCLIiC,EAFDC,YAAYN,GCA1BO,OAAOF,MAAQA,EACfE,OAAO7C,QAAUA,ECeF8C,MAZf,WACE,OAEA,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDcC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAUT,MAAOA,GACb,kBAAC,EAAD,OACUU,SAASC,eAAe,SDsHpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7ee4a1bf.chunk.js","sourcesContent":["import React from 'react';\nimport {Link } from 'react-router-dom'\n\nconst Header = () => (\n    <div>\n        <nav>\n            <li><Link to='/'>List</Link></li>\n            <li><Link to='/create'>create</Link></li>\n        </nav>\n    </div>\n)\n\nexport default Header;","export function addNote(payload){\n    return { type: 'ADD_NOTE', payload}\n}","import React, {Component} from 'react';\nimport { connect } from \"react-redux\";\nimport { addNote } from \"../actions/index\"\nimport \"../App.css\"\n\nclass Create extends Component {\n    constructor() {\n        super()\n        this.state ={\n            title: '',\n            note: ''\n        }\n    }\n\n    changeHandler = event => {\n        const name = event.target.name\n        const value = event.target.value\n\n        this.setState({\n            ...this.state,\n            [name]: value\n        })\n        localStorage.setItem(name,this.state[name])\n\n    }\n    submitForm = event => {\n        event.preventDefault()\n        this.props.dispatch(addNote(this.state))    \n        this.setState({\n            title: '',\n            note: ''\n        })\n    }\n\n    // componentDidMount(){\n    //     this.setState({\n    //         title: localStorage.getItem('title'),\n    //         note: localStorage.getItem('note')\n    //     })\n    // }\nrender() {\n    return (\n            <div className=\"bg\">\n                <div className=\"container\">\n                    <form onSubmit = {this.submitForm}>\n                        <div className=\"form-group row\">\n                            <label className=\"col-sm-2 col-form-label label\">Title</label>\n                            <div className=\"col-sm-10\">\n                                <input type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter title\"\n                                        name=\"title\"\n                                        value = {this.state.title}\n                                        onChange = {this.changeHandler}/>\n                            </div>\n                        </div>\n                        <div className=\"form-group row \">\n                            <label className=\"col-sm-2 col-form-label label\">Note</label>\n                            <div className=\"col-sm-10\">\n                                <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" \n                                        rows='25'\n                                        name=\"note\"\n                                        value={this.state.note}\n                                        onChange= {this.changeHandler}></textarea>\n                            </div>\n                        </div>\n                        <div className=\"form-group row \">\n                            <div className=\"col-sm-10\">\n                                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect()(Create);","import React, {Component} from 'react'\nimport { connect } from \"react-redux\";\n\nclass List extends Component {\n    render() {\n        return (\n            <div>\n                <table className=\"table table-dark\">\n                    <thead>\n                        <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Title</th>\n                        <th scope=\"col\">Note summary</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n\n                    {this.props.notes.map(note => \n                        <tr>\n                        <th scope=\"row\">1</th>\n                        <td>{note.title}</td>\n                        <td>{note.note}</td>\n                        </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\nfunction mapStateTOProps(state){\n    return {\n        notes: state.notes\n    }\n}\nexport default connect(mapStateTOProps)(List);","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Create from './Create'\nimport List from './List'\n\nconst Main = () => (\n    <div>\n        <Switch>\n            <Route exact path = '/' component={List}/>\n            <Route exact path = '/create' component={Create}/>\n        </Switch>        \n    </div>\n)\n\nexport default Main","const initialState = {\n    notes: []\n}\n\nfunction rootReducer(state = initialState, action){\n    if(action.type === \"ADD_NOTE\"){\n        return Object.assign({}, state, {\n            notes: state.notes.concat(action.payload)\n        })\n    }\n    return state;\n}\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import store from \"../store/index\";\nimport { addNote } from \"../actions/index\"\n\nwindow.store = store;\nwindow.addNote = addNote;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Header from './module/Header'\nimport Main from './module/Main'\nimport './App.css';\nimport index from \"./js/index\";\n\nfunction App() {\n  return (\n\n  <div >\n    <BrowserRouter>\n      <Header/>\n      <Main/>\n      </BrowserRouter>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\nReactDOM.render((\n    <Provider store={store}>\n        <App/>\n    </Provider>), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}